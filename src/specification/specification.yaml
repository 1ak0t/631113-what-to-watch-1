openapi: "3.0.2"
info:
  title: REST API сервер для проекта What to watch.
  description: Список ресурсов и маршрутов сервера What to watch.
  version: 1.0.0
tags:
  - name: films
    description: Действия с фильмами
  - name: promo
    description: Получить промо-фильм
  - name: favorites
    description: Действия с фильмами "К просмотру"
  - name: comments
    description: Действия с комментариями
  - name: users
    description: Действие с пользователями
paths:
  /films/:
    get:
      tags:
        - films
      summary: Получить список фильмов
      description: Получает список фильмов
      operationId: getFilms
      responses:
        '200':
          description: Массив фильмов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
    post:
      tags:
        - films
      summary: Добавить новый фильм
      description: Добавляет новый фильм
      operationId: createFilm
      requestBody:
        description: Объект с новым фильмом
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFilm'
        required: true
      responses:
        '201':
          description: Фильм создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '400':
          description: Ошибка тела запроса
          content: {}
        '404':
          description: Фильм не найден
          content: {}
  /films/{filmId}:
    get:
      tags:
        - films
      summary: Получение детальной информации о фильме
      description: Получение детальной информации о фильме с идентификатором {filmId}
      operationId: getFilm
      parameters:
        - name: filmId
          in: path
          description: Уникальный идентификатор фильма
          required: true
          schema:
            type: string
            example: lkn234kn
      responses:
        '200':
          description: Фильм
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
    put:
      tags:
        - films
      summary: Редактирование карточки фильма
      description: Обновляет фильм с идентификатором {filmId}
      operationId: updateFilmById
      parameters:
        - name: filmId
          in: path
          description: Уникальный идентификатор фильма
          required: true
          schema:
            type: string
            example: j1k3n5
      requestBody:
        description: Объект с измененным фильмом
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFilm'
        required: true
      responses:
        '200':
          description: Фильм обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '404':
          description: Фильм не найден
          content: {}
    delete:
      tags:
        - films
      summary: Удалить фильм
      description: Удаляет фильм с идентификатором {filmId}
      operationId: deleteFilmById
      parameters:
        - name: filmId
          in: path
          description: Уникальный идентификатор фильма
          required: true
          schema:
            type: string
            example: rg34g52
      responses:
        '200':
          description: Фильм удален
          content: {}
        '404':
          description: Фильм не найден
          content: {}
  /films/genre/{genreName}:
    get:
      tags:
        - films
      summary: Получить список фильмов по жанру
      description: Возвращает список фильмов по жанру
      operationId: getFilmsByGenre
      parameters:
        - name: genreName
          in: path
          description: Название жанра
          required: true
          schema:
            type: string
            example: Fantasy
      responses:
        '200':
          description: Получен список фильмов по жанру
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
        '404':
          description: Фильмы не найден
          content: {}
  /promo:
    get:
      tags:
        - promo
      summary: Получить промо-фильм
      description: Получает промо-фильм
      operationId: getPromo
      responses:
        '200':
          description: Промо-фильм
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '404':
          description: Фильм не найден
          content: {}
  /favorites:
    get:
      tags:
        - favorites
      summary: Получить список фильмов "К просмотру"
      description: Получает список фильмов "К просмотру"
      operationId: getFavorites
      responses:
        '200':
          description: Массив фильмов "К просмотру"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
        '401':
          description: Пользователь не авторизован
          content: {}
        '404':
          description: Фильмы не найдены
          content: {}
  /favorites/{filmId}:
    post:
      tags:
        - favorites
      summary: Добавить фильм в список "К просмотру"
      description: Добавляет фильм в список "К просмотру"
      operationId: addFavorites
      parameters:
        - name: filmId
          in: path
          description: Уникальный идентификатор фильма
          required: true
          schema:
            type: string
            example: lk23ml23
      responses:
        '200':
          description: Добавленный фильм
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '401':
          description: Пользователь не авторизован
          content: {}
        '404':
          description: Фильм не найден
          content: {}
    delete:
      tags:
        - favorites
      summary: Удаляет фильм из списка "К просмотру"
      description: Удаляет фильм из списка "К просмотру"
      operationId: removeFavorites
      parameters:
        - name: filmId
          in: path
          description: Уникальный идентификатор фильма
          required: true
          schema:
            type: string
            example: lk23ml23
      responses:
        '200':
          description: Фильм удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '401':
          description: Пользователь не авторизован
          content: {}
        '404':
          description: Фильм не найден
          content: {}
  /comments/{filmId}:
    post:
      tags:
        - comments
      summary: Добавляет комментарий к фильму
      description: Добавить комментарий к фильму
      operationId: addComment
      parameters:
        - name: filmId
          in: path
          description: Уникальный идентификатор фильма
          required: true
          schema:
            type: string
            example: 42j423jjs
      requestBody:
        description: Комментарий к фильму
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Комментарий добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Пользователь не авторизован
          content: {}
        '404':
          description: Комментарий не найден
          content: {}
  /user/login:
    get:
      tags:
        - users
      summary: Проверить статус авторизации пользователя
      description: Возвращает информацию о статусе авторизации пользователя.
      operationId: getUserStatus
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
      responses:
        '200':
          description: Статус авторизации пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthInfo'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorMessage'
      security:
        - tokenAuth: []
    post:
      tags:
        - users
      summary: Авторизоваться на сервере
      description: Отправляет авторизационные данные пользователя (логин и пароль). В случае успешного запроса сервер вернёт токен, по которому в дальнейшем происходит авторизация. Этот токен необходимо передавать через заголовок X-Token. Если авторизация не проходит, сервер вернёт код состояния 401 при запросах на закрытые части сайта.
      operationId: postLogin
      requestBody:
        description: Объект, содержащий логин и пароль пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      responses:
        '200':
          description: Статус авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthInfo'
        '400':
          description: Ошибка тела запроса
          content: {}
  /user/logout:
    delete:
      tags:
        - users
      summary: Завершить сеанс пользователя
      description: Завершает сеанс работы — выход из закрытой части приложения.
      operationId: deleteLogout
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
      responses:
        '204':
          description: Сеанс завершён
      security:
        - tokenAuth: []
  /user/register:
    delete:
      tags:
        - users
      summary: Зарегистрировать пользователя
      description: Зарегистрировать пользователя
      operationId: registerUser
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
      responses:
        '204':
          description: Сеанс завершён
      security:
        - tokenAuth: []
components:
  schemas:
    CreateFilm:
      type: object
      properties:
        name:
          type: string
          example: The Grand Budapest Hotel
        description:
          type: string
          example: In the 1930s, the Grand Budapest Hotel is a popular European ski resort, presided over by concierge Gustave H. (Ralph Fiennes). Zero, a junior lobby boy, becomes Gustave's friend and protege.
        date:
          type: string
          example: 2021-12-12T21:55:28.147Z
        genre:
          $ref: '#/components/schemas/Genre'
        released:
          type: integer
          format: int32
          example: 2014
        rating:
          type: integer
          format: int32
          example: 8.9
        previewVideoLink:
          type: string
          example: https://some-link
        videoLink:
          type: string
          example: https://some-link
        starring:
          type: array
          example: ["Bill Murray"]
        director:
          type: string
          example: Wes Anderson
        runTime:
          type: integer
          format: int32
          example: 99
        comments:
          type: integer
          format: int32
          example: 240
        user:
          $ref: '#/components/schemas/User'
        posterImage:
          type: string
          example: https://some-link
        backgroundImage:
          type: string
          example: https://some-link
        backgroundColor:
          type: string
          example: https://some-link
    Film:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: l23lzpa3
            commentCount:
              type: integer
              format: int32
              example: 5
        - $ref: '#/components/schemas/CreateFilm'
    User:
      type: object
      properties:
        userName:
          type: string
          example: Oliver.conner
        email:
          type: string
          example: liver.conner@gmail.com
        avatar:
          type: string
          example: img/1.png
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          example: liver.conner@gmail.com
        password:
          type: string
          example: 123456
    Genre:
      type: string
      enum:
        - comedy
        - crime
        - documentary
        - drama
        - horror
        - family
        - romance
        - scifi
        - thriller
    Comment:
      type: object
      properties:
        commentText:
          type: string
          example: Good film!
        commentRating:
          type: number
          example: 4.3
    AuthInfo:
      type: object
      properties:
        avatarUrl:
          type: string
          example: img/1.png
        email:
          type: string
          example: Oliver.conner@gmail.com
        id:
          type: number
          example: 1
        name:
          type: string
          example: Oliver.conner
        token:
          type: string
          example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
    AuthErrorMessage:
      type: object
      properties:
        error:
          type: string
          example: You are not logged in or you do not have permission to this page.
    NotFoundErrorMessage:
      type: object
      properties:
        error:
          type: string
          example: Film id 999 does not exist
